{"name": "test_closeDropDownBox", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <Assignment.pages.TypeAndArrangementPage.SelectBearingTypePage object at 0x000002396D730DF0>, locatorValue = 'bearing-icon', locatorType = 'class'\n\n    def mouseHoverActions(self,locatorValue,locatorType):\n        element=None\n        try:\n            locatorType=locatorType.lower()\n>           element=self.waitForElement(locatorValue,locatorType)\n\n..\\base\\BaseClass.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Assignment.pages.TypeAndArrangementPage.SelectBearingTypePage object at 0x000002396D730DF0>, locatorValue = 'bearing-icon', locatorType = 'class'\n\n    def waitForElement(self,locatorValue,locatorType):\n        locatorType=locatorType.lower()\n        ele=None\n        self.wait = WebDriverWait(self.driver,20,poll_frequency=2,ignored_exceptions=[NoSuchElementException,\n                                                                                    ElementNotVisibleException,\n                                                                                    ElementNotSelectableException])\n        if locatorType == \"id\":\n            ele = self.wait.until(lambda x:x.find_element_by_id(locatorValue))\n            return ele\n    \n        elif locatorType == \"css\":\n            ele = self.wait.until(lambda x:x.find_element_by_css(locatorValue))\n            return ele\n    \n        elif locatorType == \"xpath\":\n            ele = self.wait.until(lambda x:x.find_element_by_xpath(locatorValue))\n            return ele\n    \n        elif locatorType == \"class\":\n>           ele = self.wait.until(lambda x:x.find_element_by_class_name(locatorValue))\n\n..\\base\\BaseClass.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"7b821c4a2a0fca395cf71afaa84385c1\")>\nmethod = <function BaseClass.waitForElement.<locals>.<lambda> at 0x000002396D72BDC0>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Assignment.tests.test_tc2.Test_002_ButtonColor object at 0x000002396D730EE0>\n\n    def test_closeDropDownBox(self):\n>       self.dp.closeDropDownOption()\n\ntc1.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\TypeAndArrangementPage.py:61: in closeDropDownOption\n    action=self.mouseHoverActions(self._bearingIcon,\"class\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Assignment.pages.TypeAndArrangementPage.SelectBearingTypePage object at 0x000002396D730DF0>, locatorValue = 'bearing-icon', locatorType = 'class'\n\n    def mouseHoverActions(self,locatorValue,locatorType):\n        element=None\n        try:\n            locatorType=locatorType.lower()\n            element=self.waitForElement(locatorValue,locatorType)\n            action= ActionChains(self.driver)\n            action.move_to_element(element)\n            self.logs.info(\"Mouseover Action on locator type:\" + locatorType + \" and with the locator value:\" + locatorValue + \"is successful\")\n            return action\n    \n        except:\n            self.logs.info(\"Mouseover Action on locator type:\" + locatorType + \" and with the locator value:\" + locatorValue + \"is unsuccessful\")\n            self.getScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BaseClass.py:118: AssertionError"}, "steps": [{"name": "closing the dropdown box", "status": "passed", "start": 1610285038875, "stop": 1610285038875}], "attachments": [{"name": "log", "source": "6b617b1f-331b-4126-a552-853cfbd5a8d5-attachment.txt", "type": "text/plain"}], "start": 1610285038875, "stop": 1610285059399, "uuid": "a22d3df0-2eee-47d7-828d-0c91756c543c", "historyId": "a959fa9e4f071f0ce1acac34665bcc8b", "testCaseId": "623a50b9f905f635c7fa060948a41caa", "fullName": "test_tc2.Test_002_ButtonColor#test_closeDropDownBox", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "suite", "value": "test_tc2"}, {"name": "subSuite", "value": "Test_002_ButtonColor"}, {"name": "host", "value": "indrasen-PC"}, {"name": "thread", "value": "9868-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_tc2"}]}