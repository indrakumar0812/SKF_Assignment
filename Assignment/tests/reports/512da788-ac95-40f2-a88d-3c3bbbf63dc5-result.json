{"name": "test_NextButtonColor", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <Assignment.pages.TypeAndArrangementPage.SelectBearingTypePage object at 0x000002A65116DC10>, locatorValue = \"//div[contains(@id,'mat-select-value-9')]\"\nlocatorType = 'xpath'\n\n    def mouseHoverActions(self,locatorValue,locatorType):\n        element=None\n        try:\n            locatorType=locatorType.lower()\n>           element=self.waitForElement(locatorValue,locatorType)\n\n..\\base\\BaseClass.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Assignment.pages.TypeAndArrangementPage.SelectBearingTypePage object at 0x000002A65116DC10>, locatorValue = \"//div[contains(@id,'mat-select-value-9')]\"\nlocatorType = 'xpath'\n\n    def waitForElement(self,locatorValue,locatorType):\n        locatorType=locatorType.lower()\n        ele=None\n        self.wait = WebDriverWait(self.driver,20,poll_frequency=2,ignored_exceptions=[NoSuchElementException,\n                                                                                    ElementNotVisibleException,\n                                                                                    ElementNotSelectableException])\n        if locatorType == \"id\":\n            ele = self.wait.until(lambda x:x.find_element_by_id(locatorValue))\n            return ele\n    \n        elif locatorType == \"css\":\n            ele = self.wait.until(lambda x:x.find_element_by_css(locatorValue))\n            return ele\n    \n        elif locatorType == \"xpath\":\n>           ele = self.wait.until(lambda x:x.find_element_by_xpath(locatorValue))\n\n..\\base\\BaseClass.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9b9512d42c0fb3678a95d1931431636c\")>\nmethod = <function BaseClass.waitForElement.<locals>.<lambda> at 0x000002A651146160>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Assignment.tests.test_tc2.Test_002_ButtonColor object at 0x000002A651075DC0>\n\n    def test_NextButtonColor(self):\n        self.cl.info(\"--------------------Test_002_ButtonColor------------------------------\")\n        #super(Test_002_ButtonColor, bp).classObjects()\n        #super(Test_002_ButtonColor, bp).test_HomePageTitle()\n        #super(Test_002_ButtonColor, bp).test_SelectSingleBearing()\n        #super().test_HomePageTitle()\n        #super().test_SelectSingleBearing()\n        self.cl.info(\"--------------------Clicking on drop downbox---------------------------\")\n>       self.dp.clickDropDownBox()\n\ntest_tc2.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\TypeAndArrangementPage.py:23: in clickDropDownBox\n    action = self.mouseHoverActions(self._bearingDropbox,\"xpath\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Assignment.pages.TypeAndArrangementPage.SelectBearingTypePage object at 0x000002A65116DC10>, locatorValue = \"//div[contains(@id,'mat-select-value-9')]\"\nlocatorType = 'xpath'\n\n    def mouseHoverActions(self,locatorValue,locatorType):\n        element=None\n        try:\n            locatorType=locatorType.lower()\n            element=self.waitForElement(locatorValue,locatorType)\n            action= ActionChains(self.driver)\n            action.move_to_element(element)\n            self.logs.info(\"Mouseover Action on locator type:\" + locatorType + \" and with the locator value:\" + locatorValue + \"is successful\")\n            return action\n    \n        except:\n            self.logs.info(\"Mouseover Action on locator type:\" + locatorType + \" and with the locator value:\" + locatorValue + \"is unsuccessful\")\n            self.getScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BaseClass.py:118: AssertionError"}, "attachments": [{"name": "log", "source": "2181e0bc-a88a-4616-bf43-e74fb37e0370-attachment.txt", "type": "text/plain"}], "start": 1610285794369, "stop": 1610285814842, "uuid": "4d21a140-8a43-4b28-bfe1-be48afbe94ec", "historyId": "39bdfb8174a0ae77dd39187a971103b0", "testCaseId": "ca8d9c69cd4a691e86e243d3251fe010", "fullName": "test_tc2.Test_002_ButtonColor#test_NextButtonColor", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "suite", "value": "test_tc2"}, {"name": "subSuite", "value": "Test_002_ButtonColor"}, {"name": "host", "value": "indrasen-PC"}, {"name": "thread", "value": "4760-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_tc2"}]}