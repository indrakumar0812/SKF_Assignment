{"name": "test_GetDropBoxValues", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <Assignment.pages.TypeAndArrangementPage.SelectBearingTypePage object at 0x00000231561ABC10>, locatorValue = \"//div[contains(@id,'mat-select-value-9')]\"\nlocatorType = 'xpath'\n\n    def mouseHoverActions(self,locatorValue,locatorType):\n        element=None\n        try:\n            locatorType=locatorType.lower()\n>           element=self.waitForElement(locatorValue,locatorType)\n\n..\\base\\BaseClass.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Assignment.pages.TypeAndArrangementPage.SelectBearingTypePage object at 0x00000231561ABC10>, locatorValue = \"//div[contains(@id,'mat-select-value-9')]\"\nlocatorType = 'xpath'\n\n    def waitForElement(self,locatorValue,locatorType):\n        locatorType=locatorType.lower()\n        ele=None\n        self.wait = WebDriverWait(self.driver,20,poll_frequency=2,ignored_exceptions=[NoSuchElementException,\n                                                                                    ElementNotVisibleException,\n                                                                                    ElementNotSelectableException])\n        if locatorType == \"id\":\n            ele = self.wait.until(lambda x:x.find_element_by_id(locatorValue))\n            return ele\n    \n        elif locatorType == \"css\":\n            ele = self.wait.until(lambda x:x.find_element_by_css(locatorValue))\n            return ele\n    \n        elif locatorType == \"xpath\":\n>           ele = self.wait.until(lambda x:x.find_element_by_xpath(locatorValue))\n\n..\\base\\BaseClass.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"bf2136543c673c7cec7b90067d6e1350\")>\nmethod = <function BaseClass.waitForElement.<locals>.<lambda> at 0x0000023156192E50>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\..\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Assignment.tests.test_tc1.Test_001_DropDown object at 0x00000231561AB700>\n\n    def test_GetDropBoxValues(self):\n        self.cl.info(\"--------------------Getting all Bearing type options-------------\")\n>       self.dp.clickDropDownBox()\n\ntest_tc1.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\TypeAndArrangementPage.py:23: in clickDropDownBox\n    action = self.mouseHoverActions(self._bearingDropbox,\"xpath\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Assignment.pages.TypeAndArrangementPage.SelectBearingTypePage object at 0x00000231561ABC10>, locatorValue = \"//div[contains(@id,'mat-select-value-9')]\"\nlocatorType = 'xpath'\n\n    def mouseHoverActions(self,locatorValue,locatorType):\n        element=None\n        try:\n            locatorType=locatorType.lower()\n            element=self.waitForElement(locatorValue,locatorType)\n            action= ActionChains(self.driver)\n            action.move_to_element(element)\n            self.logs.info(\"Mouseover Action on locator type:\" + locatorType + \" and with the locator value:\" + locatorValue + \"is successful\")\n            return action\n    \n        except:\n            self.logs.info(\"Mouseover Action on locator type:\" + locatorType + \" and with the locator value:\" + locatorValue + \"is unsuccessful\")\n            self.getScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BaseClass.py:118: AssertionError"}, "attachments": [{"name": "log", "source": "6e86d856-39a8-4dcc-82fe-4af69ddf1049-attachment.txt", "type": "text/plain"}], "start": 1610290242662, "stop": 1610290263063, "uuid": "24e0d898-31c5-45bd-b45c-79268b56ab1c", "historyId": "f0c343b557d44d1ae3e63e9a5e1a28a4", "testCaseId": "673e1aac924b49a08bece899ee05ee6b", "fullName": "test_tc2.Test_001_DropDown#test_GetDropBoxValues", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "suite", "value": "test_tc2"}, {"name": "subSuite", "value": "Test_001_DropDown"}, {"name": "host", "value": "indrasen-PC"}, {"name": "thread", "value": "9868-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_tc2"}]}